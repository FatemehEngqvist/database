-- ORDERING

SELECT name, NATIONALITY
FROM students
WHERE HEIGHT >= 175
ORDER BY NATIONALITY DESC, WEIGHT DESC;

SELECT * FROM AGENTS;
SELECT AGENT_NAME, WORKING_AREA FROM AGENTS WHERE WORKING_AREA='London';

SELECT * FROM agents WHERE commission <= 0.11;

SELECT agent_code,WORKING_AREA FROM agents WHERE commission > 0.11;



-- GROUPING

SELECT NATIONALITY, MAX(height), MIN(height), AVG(height) FROM STUDENTS GROUP BY NATIONALITY;
SELECT NATIONALITY, count(*) FROM STUDENTS GROUP BY NATIONALITY;
SELECT NATIONALITY, MAX(WEIGHT*100/HEIGHT), MAX(WEIGHT)*100/max(HEIGHT) FROM STUDENTS GROUP BY NATIONALITY;
SELECT NATIONALITY, SUM(height) FROM STUDENTS GROUP BY NATIONALITY, WEIGHT;
SELECT NATIONALITY, count(height) FROM STUDENTS WHERE HEIGHT > 170 GROUP BY NATIONALITY;
SELECT NATIONALITY, count(height) FROM STUDENTS WHERE HEIGHT < 180 GROUP BY NATIONALITY;
SELECT NATIONALITY, count(height) FROM STUDENTS WHERE HEIGHT < 180 GROUP BY NATIONALITY HAVING count(height) > 1;



CREATE TABLE PUBLIC.TEACHERS (
	PERSONNUMBER INTEGER,
	NAME VARCHAR(100),
	SURANME VARCHAR(100),
	NATIONALITY VARCHAR(100),
	BIRTHDAY DATE,
	SALARY INTEGER,
	CONSTRAINT TEACHERS_PK PRIMARY KEY (PERSONNUMBER)
);
CREATE TABLE PUBLIC.COURSES (
	CODE INTEGER,
	NAME VARCHAR(100),
	TEACHER INTEGER,
	CONSTRAINT COURSES_PK PRIMARY KEY (CODE),
	CONSTRAINT COURSES_TEACHERS_FK FOREIGN KEY (TEACHER) REFERENCES PUBLIC.TEACHERS(PERSONNUMBER)
);

INSERT INTO TEACHERS VALUES (1001, 'Roberto', 'Guanciale', 'Italian', '1979-12-08', 30000);
INSERT INTO TEACHERS VALUES (1002, 'Erik', 'Anderson', 'Swedish', '1979-12-08', 29000);
INSERT INTO TEACHERS VALUES (1003, 'Jhon', 'Gates', 'USA', '1960-11-08', 31000);

INSERT INTO COURSES VALUES (20,'Java 1', 1001);
INSERT INTO COURSES VALUES (21,'Java 1', 1001);
INSERT INTO COURSES VALUES (22,'DBMS', 1001);
INSERT INTO COURSES VALUES (23,'C++', 1002);
INSERT INTO COURSES VALUES (24,'Assembler', 1002);
INSERT INTO COURSES VALUES (25,'Networking', 1003);
INSERT INTO COURSES VALUES (26,'Operating System', 1003);
INSERT INTO COURSES VALUES (27,'Python', 1003);

SELECT * FROM COURSES, TEACHERS;
SELECT * FROM COURSES, TEACHERS, STUDENTS;

SELECT * FROM COURSES, TEACHERS WHERE courses.TEACHER = TEACHERs.PERSONNUMBER;
SELECT * FROM COURSES JOIN TEACHERS ON courses.TEACHER = TEACHERs.PERSONNUMBER;
SELECT * FROM COURSES JOIN TEACHERS ON courses.TEACHER = TEACHERs.PERSONNUMBER WHERE courses.NAME LIKE 'J%';

SELECT * FROM STUDENTS AS S1, STUDENTS AS S2 WHERE S1.height < S2.HEIGHT;
SELECT * FROM STUDENTS AS S1 JOIN STUDENTS AS S2 ON S1.height < S2.HEIGHT;
SELECT PERSONNUMBER, count(*) FROM STUDENTS AS S1 JOIN STUDENTS AS S2 ON S1.height < S2.HEIGHT GROUP BY PERSONNUMBER;
SELECT s1.PERSONNUMBER, name, count(*) FROM STUDENTS AS S1 JOIN STUDENTS AS S2 ON S1.height < S2.HEIGHT GROUP BY s1.PERSONNUMBER, s1.NAME;

SELECT * FROM STUDENTS AS S1 LEFT JOIN STUDENTS AS S2 ON S1.height < S2.HEIGHT;
SELECT s1.PERSONNUMBER, name, count(*) FROM STUDENTS AS S1 LEFT JOIN STUDENTS AS S2 ON S1.height < S2.HEIGHT GROUP BY s1.PERSONNUMBER, s1.NAME;


CREATE TABLE STUDENTS_COURSES (
	studentcode INTEGER,
	coursecode INTEGER
);

INSERT INTO STUDENTS_COURSES VALUES (1002, 20);
INSERT INTO STUDENTS_COURSES VALUES (1002, 21);
INSERT INTO STUDENTS_COURSES VALUES (1003, 21);
INSERT INTO STUDENTS_COURSES VALUES (1003, 22);
INSERT INTO STUDENTS_COURSES VALUES (1003, 23);


SELECT *
FROM STUDENTS as S
JOIN STUDENTS_COURSES as SC ON S.personnumber = SC.studentcode
JOIN COURSES as C ON SC.coursecode = C.code;

SELECT *
FROM STUDENTS as S
LEFT JOIN STUDENTS_COURSES as SC ON S.personnumber = SC.studentcode
LEFT JOIN COURSES as C ON SC.coursecode = C.code;

SELECT S.name, S.surname, C.name
FROM STUDENTS as S
LEFT JOIN STUDENTS_COURSES as SC ON S.personnumber = SC.studentcode
LEFT JOIN COURSES as C ON SC.coursecode = C.code;

SELECT  S.name, S.surname, count(*)
FROM STUDENTS as S
JOIN STUDENTS_COURSES as SC ON S.personnumber = SC.studentcode
GROUP BY S.name, S.surname;

SELECT  S.name, S.surname, case when SC.coursecode is null then 0 else 1 end
FROM STUDENTS as S
LEFT JOIN STUDENTS_COURSES as SC ON S.personnumber = SC.studentcode

SELECT  S.name, S.surname, SUM(case when SC.coursecode is null then 0 else 1 end)
FROM STUDENTS as S
LEFT JOIN STUDENTS_COURSES as SC ON S.personnumber = SC.studentcode
GROUP BY S.name, S.surname;


SELECT  C.name, count(*)
FROM COURSES as C
JOIN STUDENTS_COURSES as SC ON C.code = SC.coursecode
GROUP BY C.name;

SELECT  C.name, SUM(case when SC.studentcode is null then 0 else 1 end)
FROM COURSES as C
JOIN STUDENTS_COURSES as SC ON C.code = SC.coursecode
GROUP BY C.name;

-- List students and their examiners
SELECT S.name, S.surname, T.name, T.NAME
FROM STUDENTS as S
LEFT JOIN STUDENTS_COURSES as SC ON S.personnumber = SC.studentcode
LEFT JOIN COURSES as C ON SC.coursecode = C.code
LEFT JOIN TEACHERS as T ON C.teacher = T.personnumber
;

